{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","sub","setstate","amt","setamt","item","setitem","status","setstatus","id","setid","click","setclick","total","settotal","list_amt","setlist","addstatus","setadd","addstatus1","setadd1","className","Container","fluid","Row","Col","style","color","console","log","Alert","severity","Alerts","TextField","label","onChange","event","target","value","Button","variant","onClick","trim","length","a","parseInt","list","concat","push","arr","i","key","splice","Remove","Edit","GetList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.be60f19d.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport Button from '@material-ui/core/Button';\n//import Input from '@material-ui/core/Input';\nimport TextField from'@material-ui/core/TextField';\nimport Alert from '@material-ui/lab/Alert';\n//import { green, purple } from '@material-ui/core/colors';\n//import { createMuiTheme, withStyles, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n//import BorderColorIcon from '@material-ui/icons/BorderColor';\n\nimport \"./App.css\"\n\n\n\nfunction App() {\n  var [sub,setstate] = useState(\"\")\n  var [amt,setamt]  = useState(\"\")\n  const [item,setitem] = useState([])\n  const[status,setstatus] = useState()\n  const[id,setid] = useState(0)\n  const[click,setclick] = useState(\"ADD\")\n  var[total,settotal] = useState(0)\n  const[list_amt,setlist] = useState([])\n  const[addstatus,setadd] = useState()\n  const[addstatus1,setadd1] = useState(false)\n\n  const subject = (event)=>{\n    setadd1(false)\n    setstate(event.target.value)\n  }\n  const amount = (event)=>{\n    setadd1(false)\n    setamt(event.target.value)\n  }\n  \n  const setvalue = ()=>{\n    sub = sub.trim()\n    amt = amt.trim()\n    setadd1(true)\n\n    if(sub.length > 0 & amt.length > 0 ) \n    {\n      setadd(true)\n      if (status)\n      {\n      \n      let a = parseInt(amt)\n      total = total - list_amt[id]\n      list_amt[id] = a \n      total = total + a\n      let list = sub.concat(\" :  $\",amt)\n      item[id] = list\n      setitem(item)\n      setstate(\"\")\n      setamt(\"\")\n      setstatus(!status)\n      setclick(\"ADD\")\n      settotal(total)\n      setlist(list_amt)\n      \n      }\n\n    else\n    {\n     \n      let a = parseInt(amt)\n      list_amt.push(a)\n      total = total + a\n      let list = sub.concat(\" :  $\",amt)\n      item.push(list)\n      settotal(total)\n      setlist(list_amt)\n      setitem(item)\n      setstate(\"\")\n      setamt(\"\")\n     \n      }\n    } \n    else{\n      setadd(false)\n    }   \n\n  }\n\n  const Remove =(i)=>{\n    item.splice(i,1)\n    total = total - list_amt[i]\n    list_amt.splice(i,1)\n    setitem(item)\n    setlist(list_amt)\n    settotal(total)\n    setadd1(false)\n    setstatus(false)\n    setclick(\"ADD\")\n  }\n\n  const Edit =(i)=>{\n    setstatus(!status)\n    setadd1(false)\n    setid(i)\n    if (status)\n    {\n      setclick(\"ADD\")\n    }\n    else{\n      setclick(\"EDIT\")\n    }\n  }\n\n  function Alerts(){\n    \n    if(addstatus1 === true)\n    {\n    //setadd1(!addstatus1)\n    if(addstatus )\n    {\n      console.log(\"alert\")\n      return(<Alert severity=\"success\">Item has been successfully added</Alert>) \n    }\n    if(addstatus === false)\n    {\n      console.log(\"alert1\")\n      return(<Alert severity=\"error\">Please enter the values</Alert>)\n    }\n  }\n  }\n\n  const empty = ()=>{\n    setitem([])\n    settotal(0)\n    setadd1(false)\n    setstatus(false)\n    setclick(\"ADD\")\n\n  }\n\n  function GetList(){\n    var arr=[]\n    for(let i=0;i<item.length;i++){\n      arr.push(\n                <div className=\" container margin2 \" key ={i}>\n                 <Button variant=\"outlined\" className=\"margin margin1\" > <strong>{item[i]}</strong></Button>\n                 <Button variant=\"outlined\" color=\"secondary\" onClick = {()=>Remove(i)} ><strong>Remove</strong></Button>\n                 <Button variant=\"outlined\" onClick ={()=>Edit(i)} ><strong>Edit</strong></Button>\n                 </div>\n      )}\n  return arr\n\n  }\n\n\n  return (\n  <div className =\"App\">\n\n   <div className = \"nav\">\n    <Container fluid>\n      <Row>\n       <Col><h1 style ={{color:'tomato'}}><strong>BUDGET-CALC</strong></h1></Col>\n      </Row>\n    </Container>\n  </div>\n          \n    <div>{Alerts()}</div>\n    <div className=\"absolute1\"><TextField id=\"standard-basic\" label=\"Subject\" onChange={subject} value={sub} /></div>\n    <div className=\"absolute\"><TextField id=\"standard-basic\" label=\"Amount\" onChange={amount} value={amt} /></div>\n    <br/><br/><br/><br/>\n  <Button variant=\"outlined\" color=\"primary\" onClick= {setvalue} > <strong>{click}</strong> </Button>\n    <ul className=\"list-group\">{GetList()}</ul>\n    <Button variant=\"outlined\"  > <strong>Total: {total}</strong> </Button>\n    <br/><br/><br/>\n    <Button variant=\"outlined\" color=\"secondary\" onClick = {empty}>Empty</Button>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}